#include <stdio.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/time.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <signal.h>

#include "timer.h"
#include "config.h"
#include "printer.h"
#include "cliente.h"

#define PUSH 0
#define POP 1

#define NUM_OP NUM_REQUESTS * (NUM_PROVISIONERS + NUM_CLIENTS) 

void killThreads(pthread_t * tid, int cont){
  void *ptr;
  int ret;
  int i, error;
  
  for(i=0; i< cont; i++) {
    pthread_cancel(tid[i]);
  }
}

int launchRequests(){
    pid_t child_pid;
    int *status;
    
    printf ("The PID is %d\n", (int) getpid ()); 
    child_pid = fork (); 
    if (child_pid != 0)
    { 
        printf ("this is the parent process, with PID %d\n", 
        (int)getpid()); 
        printf ("the child's PID is %d\n", (int) child_pid);
        wait(status);
    } 
    else{ 
        printf ("this is the child process, with PID %d\n", 
        (int)getpid());
        char payload_size [6];
        char queues [6];
        sprintf(payload_size,"%d",PAYLOAD_SIZE);
        sprintf(queues,"%d",NUM_CLIENTS);
        execlp("node", "node", "maxProvision.js",queues, payload_size, NULL);
    }
}

int parseOptions(int argc, const char **argv) {
    int i, j, pos;
    int lastarg;
    int exit_status = 1;
    char * hosts_array;
    
    for (i = 1; i < argc; i++) {
        lastarg = (i == (argc-1));

        if (!strcmp(argv[i],"-s")) {
            if (lastarg) goto invalid;
            PAYLOAD_SIZE = atoi(argv[++i]);
        } else if (!strcmp(argv[i],"-c")) {
            if (lastarg) goto invalid;
            NUM_CLIENTS = atoi(argv[++i]);
        } else if (!strcmp(argv[i],"-p")) {
            if (lastarg) goto invalid;
            NUM_PROVISIONERS = atoi(argv[++i]);
        } else if (!strcmp(argv[i],"-n")) {
            if (lastarg) goto invalid;
            NUM_REQUESTS = atoi(argv[++i]);
        } else if (!strcmp(argv[i],"-v")) {
            OPT_VERBOSE = 1;
        } else if (!strcmp(argv[i],"-h")) {
            if (lastarg) goto invalid;
            hosts_array = strdup(argv[++i]);
            configureAgents(hosts_array);
        } else if (!strcmp(argv[i],"--help")) {
            exit_status = 0;
            goto usage;
        } else {
            if (argv[i][0] == '-') goto invalid;
            return i;
        }
    }

    return i;

invalid:
    printf("Invalid option \"%s\" or option argument missing\n\n",argv[i]);
usage:
    printf(
"Usage: popbox-benchmark [-h \"<hosts>\"] [-p <payload>] [-c <clients>] [-n <requests>] [-v]\n\n"
" -h \"<hosts>\"     Servers hostnames (default 127.0.0.1)\n"
"  hostnames must be a string containing all the hostnames.\n"
"  Ports will be chosen automatically starting at 3001\n"
" -p <payload>       Payload size (default 10)\n"
" -c <clients>       Number of parallel connections (default 5)\n"
"  Each operation (Pop and Provision) will have this number of clients\n"
" -n <requests>      Number of requests per client (default 10)\n"
" -v                 Activate verbose\n\n"
    );
    exit(exit_status);
}

int main(int argc, const char* argv[])
{
  pthread_t * monitor;
  initAgents();
  parseOptions(argc, argv);
  QUEUES = (char **) genQueues(NUM_CLIENTS);
  chargeBalance();
  genProvRequest();
  monitor = launchAgents();
  launchRequests();
  killThreads(monitor,strlen((const char * ) monitor)/sizeof(pthread_t));

  return 0;
}
